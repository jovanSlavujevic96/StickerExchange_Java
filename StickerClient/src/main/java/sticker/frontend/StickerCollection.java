/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sticker.frontend;

import java.util.Map;
import java.awt.Checkbox;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

/**
 *
 * @author Jovan
 */
public class StickerCollection extends javax.swing.JFrame {

    Map<Integer, Checkbox> stickerChecboxMap;
    private final PrintWriter pw;
    private final String keyword;

    /**
     * Creates new form StickerCollection
     * @param title
     * @param pw
     * @param keyword
     */
    public StickerCollection(String title, PrintWriter pw, String keyword) {
        super(title);
        initComponents();

        stickerChecboxMap = new HashMap();
        this.pw = pw;
        this.keyword = keyword;
    }
    
    public static final int CHECKBOX_WIDTH = 30;
    public static final int CHECKBOX_HEIGHT = 25;
    public static final int CHECKBOX_OFFSET = 5;
    
    public void appendCheckbox(String name, int offsetX, int offsetY) {
        Checkbox cb = new Checkbox(name);
        cb.setBounds(cbPanel.getLocation().x + offsetX, cbPanel.getLocation().y + offsetY, CHECKBOX_WIDTH, CHECKBOX_HEIGHT);
        stickerChecboxMap.put(Integer.parseInt(name), cb);
        cbPanel.add(cb);
    }
    
    public void refreshWindow() {
        cbPanel.revalidate();
        cbPanel.repaint();
    }
    
    public int getCbPanelWidth() {
        return cbPanel.getWidth();
    }
    
    public int getCbPanelHeight() {
        return cbPanel.getHeight();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        removeBtn = new javax.swing.JButton();
        cbPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        removeBtn.setText("Obrisi");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cbPanelLayout = new javax.swing.GroupLayout(cbPanel);
        cbPanel.setLayout(cbPanelLayout);
        cbPanelLayout.setHorizontalGroup(
            cbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        cbPanelLayout.setVerticalGroup(
            cbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 202, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(402, Short.MAX_VALUE)
                .addComponent(removeBtn)
                .addGap(15, 15, 15))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(58, 58, 58)
                .addComponent(removeBtn)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void removeCheckboxes(List<Integer> removingStickers) {
        ArrayList<Integer> remainingStickers = new ArrayList(stickerChecboxMap.keySet());
        
        // remove checked stickers from helping list, panel & hash map
        for (int checkedKey : removingStickers) {
            remainingStickers.remove((Integer)checkedKey);
            cbPanel.remove(stickerChecboxMap.get(checkedKey));
            stickerChecboxMap.remove(checkedKey);
        }
        
        // sort helping list in descending order
        Collections.sort(remainingStickers, Collections.reverseOrder());
        Collections.sort(removingStickers, Collections.reverseOrder());
        
        // iterate through remaining check boxes and shift them to the left
        for (int checkedKey : removingStickers) {
            for (int unCheckedKey : remainingStickers) {
                if (unCheckedKey < checkedKey) {
                    // stickers which number is lesser than checked one won't be moved
                    break;
                }
                
                Checkbox tmp = stickerChecboxMap.get(unCheckedKey);
                int newX = tmp.getX();
                int newY = tmp.getY();
                
                if ((newX - StickerCollection.CHECKBOX_WIDTH - StickerCollection.CHECKBOX_OFFSET) < cbPanel.getX()) {
                    newX = cbPanel.getWidth() - StickerCollection.CHECKBOX_WIDTH - StickerCollection.CHECKBOX_OFFSET;
                    newY -= StickerCollection.CHECKBOX_HEIGHT + StickerCollection.CHECKBOX_OFFSET;
                } else {
                    newX -= StickerCollection.CHECKBOX_WIDTH + StickerCollection.CHECKBOX_OFFSET;
                }
                tmp.setBounds(newX, newY, StickerCollection.CHECKBOX_WIDTH, StickerCollection.CHECKBOX_HEIGHT);
            }
        }
        
        this.refreshWindow();
    }
    
    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        ArrayList<Integer> checkedCbs = new ArrayList();
        
        for (int key : stickerChecboxMap.keySet()) {
            if (stickerChecboxMap.get(key).getState()){
                checkedCbs.add(key);
            }
        }
        
        if (checkedCbs.isEmpty()) {
            // just exit
            return;
        }
        
        removeCheckboxes(checkedCbs);
        
        // inform server
        String msg = keyword;
        for (int removable : checkedCbs) {
            msg += Integer.toString(removable) + " ";
        }
        
        pw.println(msg);
    }//GEN-LAST:event_removeBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cbPanel;
    private javax.swing.JButton removeBtn;
    // End of variables declaration//GEN-END:variables

}
